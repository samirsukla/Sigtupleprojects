package com.Aadi;

import java.util.Properties;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import com.data.Aadi.PropertiesFile;
import com.utilities.BrowserSetUp;

public class SummaryTabPageTest extends BrowserSetUp {
	public Properties props;
	public SummaryTabPage testTab;
	private final Logger logger = LogManager.getLogger(SummaryTabPage.class);
	public BrowserSetUp pageload;

	@BeforeSuite
	public void setUp() throws Exception {
		driver = getDriver();
		testTab = new SummaryTabPage(driver);
		props = PropertiesFile.prop;
	}

	// Verify If the Summary tab is opening with 6 tables on click of summary tab
	@Test(priority = 0, enabled = true)
	public void verifyFullPageContentTest() throws Exception {
		test = extent.createTest(" Aadi Summary Tab Page Test");
		boolean flag1 = testTab.openAMITSample();
		boolean flag2 = testTab.clickSummaryTab();
		Assert.assertTrue(flag1&&flag2);
		logger.info("Summary tab is displaying with default content.");
	}

	// Verify the name of the default tables present on the Summary Tab
	@Test(priority = 5, enabled = true)
	public void verifyDefaultTablesTest() throws InterruptedException {
		boolean flag = testTab.checkDefaultTables();
		Assert.assertTrue(flag);
		logger.info("All The Default Tables are present on Motility Page");
	}

	// Verify the Columns present on the Physical table
	@Test(priority = 10, enabled = true)
	public void verifyColumnsInPhysicalExamTest() throws InterruptedException {
		boolean flag = testTab.checkPhysicalColumnNames();
		Assert.assertTrue(flag);
		logger.info("All The columns are present in Physical Examination Table");
	}

	// Verify the Rows present on the Physical Table
	@Test(priority = 15, enabled = true)
	public void verifyRowsInPhysicalExamTest() throws InterruptedException {
		boolean flag = testTab.checkPhysicalRowNames();
		Assert.assertTrue(flag);
		logger.info("All The rows are present in Physical Examination Table");
	}

	// Fetch Physical Exam Table Data and Store it in a Map on Summary Tab
	@Test(priority = 20, enabled = true)
	public void storePhysicalExamDatainHashMapFromSummary() throws Exception {
		boolean flag = testTab.getPhysicalTableDataFromSummary();

		Assert.assertTrue(flag);
		logger.info("Physical Exam data is collected and stored in Hashmap on Summary Tab");

	}

	// Verify the Columns present on the Microscopic table
	@Test(priority = 25, enabled = true)
	public void verifyColumnsInMiceroscopicTest() throws InterruptedException {
		boolean flag = testTab.checkColumnsInMicroscopicTable();
		Assert.assertTrue(flag);
		logger.info("All The columns are present in Microscopic Table");
	}

	// Verify the Rows present on the Microscopic Table
	@Test(priority = 30, enabled = true)
	public void verifyRowsInMicroscopicTest() throws InterruptedException {
		boolean flag = testTab.checkRowsInMicroscopicTable();
		Assert.assertTrue(flag);
		logger.info("All The rows are present in Microscopic Table");
	}

	// Fetch Microscopic Exam Table Data and Store it in a Map on Summary Tab
	@Test(priority = 35, enabled = true)
	public void storeMicroscopicExamDatainHashMapFromSummary() throws Exception {
		boolean flag = testTab.getMicroscopicTableDataFromSummary();

		Assert.assertTrue(flag);
		logger.info("Microscopic Exam data is collected and stored in Hashmap on Summary Tab");

	}

	// Verify the Columns present on the Sperm Motility table
	@Test(priority = 40, enabled = true)
	public void verifyColumnsInSpermMotilityTest() throws InterruptedException {
		boolean flag = testTab.checkColumnNamesofMotilityTable();
		Assert.assertTrue(flag);
		logger.info("All The columns are present in Sperm Motility Table");
	}

	// Verify the Rows present on the Sperm Motility Table
	@Test(priority = 45, enabled = true)
	public void verifyRowsInSpermMotilityTest() throws InterruptedException {
		boolean flag = testTab.checkRowNamesofMotilityTable();
		Assert.assertTrue(flag);
		logger.info("All The rows are present in Sperm Motility Table");
	}

	// Fetch Motility Table Data and Store it in a Map on Summary Tab
	@Test(priority = 50, enabled = true)
	public void storeMotilityColumnDatainHashMapFromSummary() throws Exception {
		boolean flag = testTab.getMotilityTableDataFromSummary();

		Assert.assertTrue(flag);
		logger.info("Motility Counts data is collected and stored in Hashmap on Summary Tab");

	}

	// Validate Physical Exam Table Data From Summary Tab with Physical Tab
	@Test(priority = 55, enabled = true)
	public void validatePhysicalExamTableDatainSummaryTab() throws Exception {
		boolean flag = testTab.validatePhysicalExamTableData();

		Assert.assertTrue(flag);
		logger.info("Physical Exam Table Data is properly displaying on Summary tab and is same as the Physical Tab");

	}

	// Validate Motility Counts Table Data From Summary Tab with Motility Tab
	@Test(priority = 60, enabled = true)
	public void validateMotilityCountsTableDatainSummaryTab() throws Exception {
		boolean flag = testTab.validateMotilityCountsTableData();

		Assert.assertTrue(flag);
		logger.info("Motility Counts Table Data is properly displaying on Summary tab and is same as the Motility Tab");

	}

	// Validate Microscopic Exam Table Data From Summary Tab with Motility Tab
	@Test(priority = 65, enabled = true)
	public void validateMicroscopicExamTableDatainSummaryTab() throws Exception {
		boolean flag = testTab.validateMicroscopicExamTableData();

		Assert.assertTrue(flag);
		logger.info("Microscopic Exam Table Data is properly displaying on Summary tab and is same as the Motility Tab");

	}

	// Verify the label present for Physical Exam table
	@Test(priority = 70, enabled = true)
	public void verifyPhysicalTableLabelTest() throws Exception {
		boolean flag = testTab.verifyPhysicalReportType();
		Assert.assertTrue(flag);
		logger.info("Physical Table label is Displaying as Manually Generated");
	}

	// Verify the label present for Microscopic table
	@Test(priority = 75, enabled = true)
	public void verifyMicroscopicTableLabelTest() throws InterruptedException {
		boolean flag = testTab.verifyMicroscopicReportType();
		Assert.assertTrue(flag);
		logger.info("Microscopic Table label is Displaying as AI Generated/Assisted");
	}

	// Verify the label present for Motility table
	@Test(priority = 80, enabled = true)
	public void verifyMotilityTableLabelTest() throws InterruptedException {
		boolean flag = testTab.verifyMotilityReportType();
		Assert.assertTrue(flag);
		logger.info("Motility Table label is Displaying as AI Generated/Assisted");
	}

}
